shell: /bin/zsh
scripts:
  # ===============================================================================================
  # Android
  # ===============================================================================================
  - name: android:build:apk
    cmd: flutter build apk
    description: Build Android APK only
  - name: android:build:bundle
    cmd: flutter build appbundle
    description: Build Android unified bundle (for Play Store release)
  - name: android:build:all
    cmd: android:build:apk && android:build:bundle
    description: Build Android unified bundle + standalone APK
  - name: android:push
    description: Push APK to ADB-connected device
    cmd: |-
      name=$(dart run btool get packageName)
      version=$(dart run btool get packageVersion)
      source="$(pwd)/build/app/outputs/flutter-apk/app-release.apk"
      target="/sdcard/Download/$name-$version.apk"
      adb push $source $target
  - name: android:install
    cmd: |-
      adb uninstall app.dungeonpaper
      adb install -r build/app/outputs/flutter-apk/app-release.apk
    description: Install APK on Android (does not build)
  - name: android:full
    cmd: android:build:apk && android:push && android:install
    description: Build, push and install APK to ADB connected device
  - name: android:release
    cmd: |-
      name=$(dart run btool get packageName)
      version=$(dart run btool get packageVersion)
      bundleout="$name-$version.aab"
      bundle=build/app/outputs/bundle/release/app-release.aab
      mkdir -p release/android
      android:build:bundle && cp "$bundle" "release/android/$bundleout"
      android:symbols:collect
      [[ ! -f "$(which open)" ]] || open release/android
    description: Builds, collects debug symbols, and places the output in release/ dir.
  - name: android:symbols:collect
    cmd: |-
      dir="$(pwd)/release/android"
      name=$(dart run btool get packageName)
      version=$(dart run btool get packageVersion)
      filename="symbols-$name-$version.zip"
      mkdir release
      cd build/app/intermediates/merged_native_libs/release/out/lib
      zip -r "$dir/$filename" */*
    description: Create a zip of the debug symbols for Android

  # ===============================================================================================
  # iOS
  # ===============================================================================================
  - name: ios:build:app
    cmd: flutter build ios
    description: Build iOS APP file
  - name: ios:build:bundle
    cmd: flutter build ipa
    description: Build iOS IPA file
  - name: ios:build:all
    cmd: ios:build:app && ios:build:bundle
    description: Build iOS IPA + APP
  - name: ios:pod:update
    cmd: pushd ios; pod repo update && pod install; popd
    description: Install Pods for iOS
  - name: ios:release
    cmd: |-
      name=$(dart run btool get packageName)
      version=$(dart run btool get packageVersion)
      bundleout="$name-$version.ipa"
      bundle="build/ios/ipa/Dungeon Paper.ipa"
      mkdir -p release/ios
      ios:build:bundle && cp "$bundle" "release/ios/$bundleout"
      [[ ! -f "$(which open)" ]] || open release/ios
    description: Builds, and places the output in release/ dir.

  # ===============================================================================================
  # macOS
  # ===============================================================================================
  - name: macos:build:app
    cmd: flutter build macos
    description: Build macOS App
  - name: macos:build:all
    cmd: macos:build:app
    description: 'Alias for: Build macOS App'
  - name: macos:pod:update
    cmd: pushd macos; pod repo update && pod install; popd
    description: Install Pods for macOS
  - name: macos:release
    cmd: macos:build:app && macos:pack
    description: Builds, and places the output in release/ dir.
  - name: macos:pack
    description: Package macOS app into pkg file
    cmd: |-
      app="build/macos/Build/Products/Release/Dungeon Paper.app"
      title="Dungeon Paper"
      name=$(dart run btool get packageName)
      version=$(dart run btool get packageVersion)
      outdir="release/macos"
      tmp="$outdir/pack.temp.dmg"
      dmgout="$name-$version.dmg"
      source="macos/build/dmg"

      rm -rf "$source"
      mkdir -p "$source/.background"
      cp -r "$app" "$source"
      cp "assets/images/dmg_bg.png" "$source/.background/background.png"
      ln -s "/Applications" "$source/Applications"
      size=$(du -sk "$source" | awk '{print $1}')
      size=$(($size + (1024 * 10)))
      echo "Creating DMG: $dmgout"
      hdiutil create -srcfolder "$source" -volname "$title" -fs HFS+ \
        -fsargs "-c c=64,a=16,e=16" -format UDRW -size "${size}k" "$tmp"
      echo "Attaching $tmp"
      device=$(hdiutil attach -readwrite -noverify -noautoopen "$tmp" | \
         egrep '^/dev/' | sed 1q | awk '{print $1}')
      sleep 0.5
      echo "Making layout modifications"
      echo "
        tell application \"Finder\"
          tell disk \"$title\"
            open
            set current view of container window to icon view
            set toolbar visible of container window to false
            set statusbar visible of container window to false
            set the bounds of container window to {400, 200, 900, 500}
            set theViewOptions to the icon view options of container window
            set arrangement of theViewOptions to not arranged
            set icon size of theViewOptions to 112
            set background picture of theViewOptions to file \".background:background.png\"
            # make new alias file at container window to POSIX file \"/Applications\" with properties {name:\"Applications\"}
            set position of item \"$title\" of container window to {112, 112}
            set position of item \"Applications\" of container window to {387, 112}
            close
            open
            update without registering applications
            delay 5
            close
          end tell
        end tell
      " | osascript
      chmod -Rf go-w "/Volumes/$title"
      sync
      sync
      echo "Detaching $tmp"
      hdiutil detach "$device"
      echo "Converting $tmp to $dmgout"
      [[ -f "release/macos/$dmgout" ]] && rm "$outdir/$dmgout"
      hdiutil convert "$tmp" -format UDZO -imagekey zlib-level=9 -o "$outdir/$dmgout"
      rm -f "$tmp"
      webdir="../dungeon-paper-website/public/downloads/macos"
      mkdir -p "$webdir"
      cp "$outdir/$dmgout" "$webdir"
      cp "$webdir/$dmgout" "$webdir/$name-latest.dmg"
      [[ ! -f "$(which open)" ]] || open release/macos

  # ===============================================================================================
  # Web
  # ===============================================================================================
  - name: web:build
    cmd: flutter build web
    description: Build Web app
  - name: web:publish
    cmd: firebase deploy --only hosting
    description: Publish web version using Firebase (requires build)
  - name: web:release
    cmd: web:build && web:publish
    descrition: Build & publish web version using Firebase

  # ===============================================================================================
  # All
  # ===============================================================================================
  - name: build
    cmd: android:build:all && ios:build:all && macos:build:all && web:build:all
    description: Build for all platforms
  - name: apple:pod:update
    cmd: macos:pod:update && ios:pod:update
    description: Install Pods for macOS & iOS

  # ===============================================================================================
  # Utils
  # ===============================================================================================
  - name: format
    cmd: dart format --line-length 120
    description: Format all Dart files
  - name: gen:icons
    cmd: flutter pub run icons_launcher:create
    description: Generate launcher icons
  - name: gen:splash
    cmd: flutter pub run flutter_native_splash:create
    description: Generate splash screen
  - name: gen:module
    cmd: npx -y simple-scaffold@latest -c gen/scaffold.config.js -k module
    description: Generate module from template. Append name to command. See simple-scaffold -h for help.
  - name: gen:atom
    cmd: npx -y simple-scaffold@latest -c gen/scaffold.config.js -k atom
    description: Generate atom from template. Append name to command. See simple-scaffold -h for help.
  - name: gen:molecule
    cmd: npx -y simple-scaffold@latest -c gen/scaffold.config.js -k molecule
    description: Generate molecule from template. Append name to command. See simple-scaffold -h for help.
  - name: gen:organism
    cmd: npx -y simple-scaffold@latest -c gen/scaffold.config.js -k organism
    description: Generate organism from template. Append name to command. See simple-scaffold -h for help.
  - name: intl:build
    cmd: runner build -d
    description: Build i18n files
  - name: intl:watch
    cmd: runner watch -d
    description: Build u18n files in watch mode
  - name: runner
    cmd: dart run build_runner
    description: Run Build Runner